var searchIndex = new Map(JSON.parse('[\
["jailer",{"doc":"Crate for creating sandbox environment and do some action …","t":"FNNNNNNNNNNNNN","n":["Jailer","borrow","borrow_mut","close","directory","drop","from","into","new","original_directory","set_env","try_from","try_into","type_id"],"q":[[0,"jailer"],[14,"std::io::error"],[15,"core::result"],[16,"std::path"],[17,"std::ffi::os_str"],[18,"core::option"],[19,"std::ffi::os_str"],[20,"core::any"]],"d":["<code>Jailer</code> struct which creates jail. <code>Jailer</code> struct create …","","","Closes a <code>Jailer</code>","Returns path of directory for jailer","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create new <code>Jailer</code>","Return path of original directory which was used before …","Set environment variable which will not be removed when …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"`{ce{}{}}0{b{{h{df}}}}{bj}{bd}{cc{}}4{{}{{h{bf}}}}3{{bce}{{n{l}}}{{Ab{A`}}}{{Ab{A`}}}}{c{{h{e}}}{}{}}0{cAd{}}","c":[],"p":[[5,"Jailer",0],[1,"unit"],[5,"Error",14],[6,"Result",15],[5,"Path",16],[5,"OsString",17],[6,"Option",18],[5,"OsStr",17],[10,"AsRef",19],[5,"TypeId",20]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
