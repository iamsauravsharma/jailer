var searchIndex = new Map(JSON.parse('[\
["jailer",{"doc":"Crate for creating sandbox environment and do some action …","t":"FNNNNNNNNNNNNNNNN","n":["Jailer","borrow","borrow_mut","close","directory","drop","from","into","new","original_directory","original_env_vars_os","preserved_env_vars_os","remove_preserved_env","set_env","try_from","try_into","type_id"],"q":[[0,"jailer"],[17,"std::io::error"],[18,"core::result"],[19,"std::path"],[20,"std::ffi::os_str"],[21,"std::collections::hash::map"],[22,"std::ffi::os_str"],[23,"core::any"]],"d":["<code>Jailer</code> struct which creates jail. <code>Jailer</code> struct create …","","","Closes a <code>Jailer</code>","Returns path of directory for jailer","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create new <code>Jailer</code>","Return path of original directory which was used before …","Return hashmap of original env variables","Return hashmap of preserved env variables","Remove environment variable from preserved env","Set environment variable which will be saved as preserved …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"`{ce{}{}}0{b{{h{df}}}}{bj}{bd}{cc{}}4{{}{{h{bf}}}}3{b{{n{ll}}}}0{{bc}d{{Ab{A`}}}}{{bce}d{{Ab{A`}}}{{Ab{A`}}}}{c{{h{e}}}{}{}}0{cAd{}}","c":[],"p":[[5,"Jailer",0],[1,"unit"],[5,"Error",17],[6,"Result",18],[5,"Path",19],[5,"OsString",20],[5,"HashMap",21],[5,"OsStr",20],[10,"AsRef",22],[5,"TypeId",23]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
