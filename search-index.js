var searchIndex = new Map(JSON.parse('[\
["jailer",{"doc":"Crate for creating sandbox environment and do some action …","t":"FNNNNNNNNNNNN","n":["Jailer","borrow","borrow_mut","close","directory","drop","from","into","new","set_env","try_from","try_into","type_id"],"q":[[0,"jailer"],[13,"std::io::error"],[14,"core::result"],[15,"std::path"],[16,"std::ffi::os_str"],[17,"core::option"],[18,"std::ffi::os_str"],[19,"core::any"]],"d":["<code>Jailer</code> struct which creates jail. <code>Jailer</code> struct create …","","","Closes a <code>Jailer</code>","Returns path of directory for jailer","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create new <code>Jailer</code>","Set environment variable which will not be removed when …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[2,3]]]],[1,5],[1,2],[-1,-1,[]],[-1,-2,[],[]],[[],[[4,[1,3]]]],[[1,-1,-2],[[7,[6]]],[[9,[8]]],[[9,[8]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[5,"Jailer",0],[1,"tuple"],[5,"Error",13],[6,"Result",14],[5,"Path",15],[5,"OsString",16],[6,"Option",17],[5,"OsStr",16],[10,"AsRef",18],[5,"TypeId",19]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
